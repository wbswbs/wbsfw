<?php

namespace wbs\Framework\LogDB;

use wbs\Framework\Config\ENV;
use wbs\Framework\Ip\Ip;
use wbs\Framework\Json\Response;
use wbs\Framework\WbsDbClass;
use Psr\Log\LoggerInterface;

/**
 * Class LogController Klasse zum Loggen in die Datenbank
 *
 * Kompatibel zu PSR-3 Logger Interface
 * See https://www.php-fig.org/psr/psr-3/
 *
 * @package wbs\Framework\Log
 */
class LogDBController extends WbsDBClass implements LoggerInterface
{


    /**
     * Set a Default Value for the Project Field
     *
     * @var string
     */
    protected $project_default = '';
    /**
     * Set a Default Value for the Controller Field
     *
     * @var string
     */
    protected $controller_default = '';
    /**
     * Maximale Verschachtelungstiefe für Ausgabe vom Arrays
     */
    const MAX_LEVEL_ARRAY = 3;

    /**
     * Schalter für das Logging
     *
     * @var bool
     */
    private $db_active;

    /**
     * @var string
     */
    private $table_name;

    const ACTION_ERROR = 'error';
    const ACTION_INFO = 'info';
    /**
     * Mit welcher Methode wird gelesen und geschrieben (doctrine oder mysql)
     *
     * @var string
     */
    protected $db_method = 'plain_mysql';
    const DOCTRINE = 'doctrine';
    const PLAIN_MYSQL = 'plain_mysql';

    // Datenbankfelder der Log Tabelle
    //Generated by QS
    const FLD_ID = 'id';
    const FLD_LEVEL = 'level';
    const FLD_MESSAGE = 'message';
    const FLD_USER = 'user';
    const FLD_IP = 'ip';
    const FLD_PROJECT = 'project';
    const FLD_CONTROLLER = 'controller';
    const FLD_ACTION = 'action';
    const FLD_AUFTRAG_NR = 'auftrag_nr';
    const FLD_AUFTRAG_ID = 'auftrag_id';
    const FLD_POSITION_ID = 'position_id';
    const FLD_CREATED = 'created';

    /**
     * INIT
     *
     * @throws \Exception
     */
    public function __construct($wbs, $table_name = 'wbs_log')
    {
        parent::__construct($wbs);
        $this->table_name = $table_name;
        $this->db_active = true;
    }

    /**
     * Logging an oder ausschalten
     *
     * @param bool $b_value
     */
    public function setDBIsActive($b_value)
    {
        $this->db_active = $b_value;
    }

    /**
     * @param $data
     */
    public function addDB($data)
    {
        if ($this->db_active) {

            if ($this->db_method == self::DOCTRINE) {
                throw new \Exception('Doctrine is not yet supported');
            } else {
                $this->insertDataWithPdo($data);
            }
        }
    }

    /**
     * Einen Datenbankeintrag in die Log Tabelle schreiben
     *
     * @param array $data
     */
    private function insertDataWithPdo($data)
    {

        $entry = $this->getNewLogEntryArray();
        foreach ((array)$data as $key => $value) {
            switch ($key) {
                case self::FLD_MESSAGE:
                    if (is_array($value)) {
                        $result = '';
                        $this->arrayOutput($value, 0, $result);
                    } else {
                        $result = $value;
                    }
                    $entry[$key] = $result;
                    break;
                case self::FLD_LEVEL:
                case self::FLD_USER:
                case self::FLD_IP:
                case self::FLD_PROJECT:
                case self::FLD_CONTROLLER:
                case self::FLD_ACTION:
                case self::FLD_AUFTRAG_NR:
                    $entry[$key] = $value;
                    break;
                case self::FLD_AUFTRAG_ID:
                case self::FLD_POSITION_ID:
                    $entry[$key] = (int)$value;
                    break;
                default:
                    // Unknown Value
                    //throw new \Exception('Invalid Key in Log data: ' . $key);
            }
        }

        $stmt = $this->pdo()->prepare("INSERT INTO 
                {$this->getTableName()}
                (level,message,
                user,ip,
                project,controller,action,
                auftrag_nr, auftrag_id, position_id,
                created
                ) 
                VALUES 
                (:level,:message,
                :user,:ip,
                :project,:controller,:action,
                :auftrag_nr, :auftrag_id, :position_id,
                NOW()
                )"
        );
        $stmt->bindValue(':' . self::FLD_LEVEL, mb_substr($entry[self::FLD_LEVEL], 0,9));
        if(!($entry[self::FLD_MESSAGE])){
            $entry[self::FLD_MESSAGE] = 'NO MESSAGE';
        }
        $stmt->bindValue(':' . self::FLD_MESSAGE, mb_substr($entry[self::FLD_MESSAGE],0,4096));
        $stmt->bindValue(':' . self::FLD_USER, mb_substr($entry[self::FLD_USER],0,32));
        $stmt->bindValue(':' . self::FLD_IP, mb_substr($entry[self::FLD_IP],0,56));
        $stmt->bindValue(':' . self::FLD_PROJECT, mb_substr($entry[self::FLD_PROJECT],0,32));
        $stmt->bindValue(':' . self::FLD_CONTROLLER, mb_substr($entry[self::FLD_CONTROLLER],0,32));
        $stmt->bindValue(':' . self::FLD_ACTION, mb_substr($entry[self::FLD_ACTION],0,32));
        $stmt->bindValue(':' . self::FLD_AUFTRAG_NR, mb_substr($entry[self::FLD_AUFTRAG_NR],0,16));
        $stmt->bindValue(':' . self::FLD_AUFTRAG_ID, $entry[self::FLD_AUFTRAG_ID]);
        $stmt->bindValue(':' . self::FLD_POSITION_ID, $entry[self::FLD_POSITION_ID]);
        $stmt->execute();
//        }catch(\Exception $e){
//            return $e->getMessage();
//        }

    }

    /**     *
     * @return array
     */
    private function getNewLogEntryArray()
    {
        return [
            self::FLD_MESSAGE => '',
            self::FLD_LEVEL => '',
            self::FLD_USER => '',
            self::FLD_IP => Ip::calculateIP(),
            self::FLD_PROJECT => $this->getProjectDefault(),
            self::FLD_CONTROLLER => $this->getControllerDefault(),
            self::FLD_ACTION => '',
            self::FLD_AUFTRAG_NR => '',
            self::FLD_AUFTRAG_ID => 0,
            self::FLD_POSITION_ID => 0
        ];
    }
    /**************************************************************************
     * V I E W
     *************************************************************************/

    /**
     * @param $base_link
     */
    public function renderBackend($base_link,$ajax_link= '',$template_path = ''){

        $html = '';
        if(!$ajax_link){
            $ajax_link = 'data_tables_log.php';
        }
        if(!$template_path){
            $template_path = __DIR__ .'/View/list.html.tpl';
        }

        $list = []; //$this->repository()->getList();

        $this->wbs()->smarty()->smarty()->clearAllCache();
        $html .= $this->wbs()->smarty()->fetchAbsoluteTemplate(
            $template_path,
            [
                'msg' => '',
                'list' => $list,
                'log_tabelle' => $this->getTableName(),
                'ajax_link' => $ajax_link
            ],
            false
        );

        return $html;
    }
    /**
     * Build the Data for DataTables on page Log
     *
     * Example: data_tables_log.php?start=0&length=5
     *
     * @return string JSON encoded
     */
    public function renderDataTableList()
    {
        // DB table to use
        $table = $this->table_name;

        // Table's primary key
        $primaryKey = 'id';

        // Array of database columns which should be read and sent back to DataTables.
        // The `db` parameter represents the column name in the database, while the `dt`
        // parameter represents the DataTables column identifier. In this case simple
        // indexes, columns are zero-base, 0 is first

        $columns = array(
//            array('db' => \wbs\Station\wbsOrder\wbsOrderController::FLD_ID, 'dt' => 0),
            array('db' => self::FLD_CREATED,
                'dt' => 0,
                'formatter' => function ($d, $row) {
                    return date('Y-m-d H:i', strtotime($d));
                }
            ),
            array('db' => self::FLD_LEVEL,
                'dt' => 1
            ),
            array('db' => self::FLD_PROJECT,
                'dt' => 2
            ),
            array('db' => self::FLD_MESSAGE,
                'dt' => 3,

            ),
            array('db' => self::FLD_USER,
                'dt' => 4
            ),
            array('db' => self::FLD_IP,
                'dt' => 5
            ),
            array('db' => self::FLD_CONTROLLER,
                'dt' => 6
            ),
            array('db' => self::FLD_ACTION,
                'dt' => 7
            ),
            array('db' => self::FLD_AUFTRAG_NR,
                'dt' => 8
            ),
            array('db' => self::FLD_AUFTRAG_ID,
                'dt' => 9
            ),
            array('db' => self::FLD_POSITION_ID,
                'dt' => 10
            )
//                'formatter' => function ($d, $row) {
//                    return '<a href="#" title="Position untersuchen" onclick="Auftrag.openPositionsId('.$d.');return false;">'.$d.'</a> '.
//                        '<a href="#" title="Scans anzeigen" onclick="Auftrag.openScansOfPositionsId('.$d.');return false;">'.
//                        '<i class="glyphicon glyphicon-list-alt"></i></a>';
//                }
//        array(
//            'db' => 'start_date',
//            'dt' => 4,
//            'formatter' => function ($d, $row) {
//                return date('jS M y', strtotime($d));
//            }
//        ),
//        array(
//            'db' => 'salary',
//            'dt' => 5,
//            'formatter' => function ($d, $row) {
//                return '$' . number_format($d);
//            }
//        )
        );

        $DataTablesServerSide = new \wbs\Framework\DataTables\DataTablesServerSide($this->wbs());

        echo json_encode(
            $DataTablesServerSide->simple($_GET,  $table, $primaryKey, $columns)
        );
        exit;
    }

    /**************************************************************************
     * D A T A B A S E
     *************************************************************************/
    /**
     * Log Tabelle anlegen, falls sie nicht vorhanden ist
     *
     * @param $table_name
     */
    public function checkTableExistance($table_name){


$sql = "
CREATE TABLE IF NOT EXISTS `{$table_name}`  (
`id` int NOT NULL AUTO_INCREMENT,
`level` varchar(9) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Level des Logs',
`message` varchar(4096) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Logmeldung',
`user` varchar(32) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Benutzername, optional',
`ip` varchar(56) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Ip6 and Ip4, optional',
`project` varchar(32) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Name des Projektes (optional)',
`controller` varchar(32) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Name des Controllers (optional)',
`action` varchar(32) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Name der Action (optional)',
`auftrag_nr` varchar(16) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Auftragsnummer (optional)',
`auftrag_id` int DEFAULT '0' COMMENT 'Auftragsid (optional)',
`position_id` int DEFAULT '0' COMMENT 'Auftragsid (optional)',
`created` datetime NOT NULL COMMENT 'Zeitpunkt des Logs',
PRIMARY KEY (`id`),
KEY `wbs_log_level_index` (`level`),
KEY `wbs_log_project_index` (`project`),
KEY `wbs_log_auftrag_nr_index` (`auftrag_nr`),
KEY `wbs_log_position_id_index` (`position_id`)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC;";

    $this->pdo()->exec($sql);
}

/**
 * Logs löschen
 */
public
function resetDB()
{
    if ($this->db_active) {
        $this->pdo()->prepare('TRUNCATE TABLE '. $this->table_name . ';')->execute();
        $this->notice('Cleared Log DB');
    }
}

    /**
     * System is unusable.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function emergency($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'EMERGENCY';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);

    }

    /**
     * Action must be taken immediately.
     *
     * Example: Entire website down, database unavailable, etc. This should
     * trigger the SMS alerts and wake you up.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function alert($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'ALERT';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
    }

    /**
     * Critical conditions.
     *
     * Example: Application component unavailable, unexpected exception.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function critical($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'CRITICAL';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
        $this->sendError('[CRITICAL]', $message, $data);
    }

    /**
     * Runtime errors that do not require immediate action but should typically
     * be logged and monitored.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function error($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'ERROR';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
        $this->sendError('[ERROR]', $message, $data);
    }

    /**
     * Exceptional occurrences that are not errors.
     *
     * Example: Use of deprecated APIs, poor use of an API, undesirable things
     * that are not necessarily wrong.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function warning($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'WARNING';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
    }

    /**
     * Normal but significant events.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function notice($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'NOTICE';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
    }

    /**
     * Interesting events.
     *
     * Example: User logs in, SQL logs.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function info($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'INFO';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
    }

    /**
     * Test Messages
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function test($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'TEST';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
    }

    /**
     * Detailed debug information.
     *
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function debug($message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= 'DEBUG';
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
    }

    /**
     * Logs with an arbitrary level.
     *
     * @param mixed $level Maximal 9 Zeichen
     * @param string $message
     * @param array $data
     *
     * @return void
     */
    public function log($level, $message, array $data = []):void
    {
        $data[self::FLD_LEVEL]= strtoupper(substr($level, 0, 9));
        $data[self::FLD_MESSAGE] =  $message;
        $this->addDB( $data);
    }

    /**
     * Mail mit dem Fehler an den Site Admin senden
     *
     * @param $level
     * @param $message
     * @param $context
     * @throws \Exception
     */
    private function sendError($level, $message, $context)
    {
        $the_add = '';
        $context['URL'] = $this->wbs()->env(ENV::URL_ABSOLUTE);
        $project = $this->wbs()->env(ENV::PROJECT_NAME)?:'N/A';
        if (is_object($context)) {
            $context = (array)$context;
        }
        if (is_array($context)) {
            $this->arrayOutput($context, 0, $the_add);
        }
        $message .= "\n\n" . $the_add;
        $this->wbs()->smtp()->sendMailToSiteAdmin(
            "[{$project}] {$level} Script Error",
            $message,
            false
        );
        unset($the_add);
    }

    private function arrayOutput($array, $level, &$the_add)
    {
        $space = str_repeat('  ', $level);
        foreach ($array as $key => $value) {
            if (is_object($value)) {
                $value = (array)$value;
            }
            if (is_array($value)) {
                $the_add .= $space . '-> ' . $key . '(' . count($value) . '): ' . PHP_EOL;
                $nextlevel = $level + 1;
                if ($nextlevel > self::MAX_LEVEL_ARRAY) {
                    $the_add .= $space . "-> Max Level " . self::MAX_LEVEL_ARRAY . " erreicht !!!!" . PHP_EOL;
                    return;
                }
                $this->arrayOutput($value, $nextlevel, $the_add);
            } else {
                $the_add .= $space . '-> ' . $key . ': ' . $value . PHP_EOL;
            }
        }
    }


    /**
     * Handle the Ajax Request and return a JSON formatted Response
     */
    public function handleAjaxRequest($action)
    {
        $response = new Response();
        $response->setQuery(__CLASS__ . ' # ' . __FUNCTION__);
        $message = 'JS ' . $this->wbs()->in('message');
        $context = $this->wbs()->in('context');

        switch ($action) {
            case self::ACTION_ERROR:
                $this->error($message, (array)$context);
                $response->setResult($message);
                $response->setSuccess(true);
                break;
            case self::ACTION_INFO:
                $this->info($message, (array)$context);
                $response->setResult($message);
                $response->setSuccess(true);
                break;
            default:
                $response->setSuccess(false);
                $response->setMessage('Der ActionHandler ' . $action . ' ist nicht vorhanden.');
        }
        return $response;
    }

    /**************************************************************************
     * G E T T E R / S E T T E R
     *************************************************************************/
    /**
     * @return string
     */
    public function getTableName()
    {
        return $this->table_name;
    }

    /**
     * @param string $table_name
     */
    public function setTableName($table_name)
    {
        $this->table_name = $table_name;
    }

    /**
     * @return string
     */
    public function getDbMethod()
    {
        return $this->db_method;
    }

    /**
     * @param string $db_method
     */
    public function setDbMethod($db_method)
    {
        switch ($db_method) {
            case self::DOCTRINE:
            case self::PLAIN_MYSQL:
                $this->db_method = $db_method;
                break;
            default:
                throw new \Exception('Unbekannte Datenbank-Methode für den Log, erlaubt sind' .
                    self::DOCTRINE . ' oder ' . self::PLAIN_MYSQL);
        }
    }

    /**
     * @return string
     */
    public function getProjectDefault()
    {
        return $this->project_default;
    }

    /**
     * @param string $project_default
     */
    public function setProjectDefault($project_default)
    {
        $this->project_default = $project_default;
    }

    /**
     * @return string
     */
    public function getControllerDefault()
    {
        return $this->controller_default;
    }

    /**
     * @param string $controller_default
     */
    public function setControllerDefault($controller_default)
    {
        $this->controller_default = $controller_default;
    }


}